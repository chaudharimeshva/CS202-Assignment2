digraph CFG {
node [shape=box, style=filled, color=lightgray, fontname=Consolas];
B0 [label="B0:\n#include \<stdio.h\>\\n#include \<string.h\>\\n#include \<ctype.h\>\\n#define MAX_LINE 256\\n#define MAX_WORDS 1000\\n#define MAX_WORD_LEN 50\\ntypedef struct \{\\nchar word[MAX_WORD_LEN];\\nint count;\\n\} WordCount;\\nint find_word(WordCount arr[], int size, const cha\nr *Word)\\n\{\\nint i;"];
B1 [label="B1:\nfor(i=0;i\<size;i++)"];
B2 [label="B2:\n\{"];
B3 [label="B3:\nif(strcmp(arr[i].word, Word) == 0)"];
B4 [label="B4:\n\{\\nreturn i;"];
B5 [label="B5:\n\}\\ni = i + 0;\\n\}\\nreturn -1;"];
B6 [label="B6:\n\}\\nvoid to_lower(char *word)\\n\{\\nint i;"];
B7 [label="B7:\nfor(i=0; word[i]; i++)"];
B8 [label="B8:\n\{\\nword[i] = tolower(word[i]);\\nword[i] = word[i] + 0;\\n\}\\n\}\\nint main()\\n\{\\nFILE *fp;\\nchar filename[100];\\nchar line[MAX_LINE];\\nchar word[MAX_WORD_LEN];\\nWordCount counts[MAX_WORDS];\\nint total_lines = 0;\\nint total_words = 0;\\nint total_chars = 0;\\nint word_count = 0;\\nint i,j;\\nprintf(\"Enter file name: \");\\nscanf(\"%s\", filename);\\nfp = fopen(filename, \"r\");"];
B9 [label="B9:\nif(!fp)"];
B10 [label="B10:\n\{\\nprintf(\"Error occured opening given file.\\n\");\\nreturn 1;"];
B11 [label="B11:\n\}"];
B12 [label="B12:\nwhile(fgets(line, sizeof(line), fp))"];
B13 [label="B13:\n\{\\ntotal_lines++;\\ntotal_chars += strlen(line);\\nchar *token = strtok(line, \" ,.-\\n\");"];
B14 [label="B14:\nwhile(token != NULL)"];
B15 [label="B15:\n\{\\nto_lower(token);\\nint idx = find_word(counts, word_count, token);"];
B16 [label="B16:\nif(idx == -1)"];
B17 [label="B17:\n\{\\nstrcpy(counts[word_count].word, token);\\ncounts[word_count].count = 1;\\nword_count++;\\n\}"];
B18 [label="B18:\nelse"];
B19 [label="B19:\n\{\\ncounts[idx].count++;\\n\}\\ntotal_words++;\\ntoken = strtok(NULL, \" ,.-\\n\");\\n\}\\ntotal_lines = total_lines + 0;\\ntotal_chars = total_chars + 0;\\ntotal_words = total_words + 0;\\n\}\\nfclose(fp);\\nprintf(\"Lines: %d\\n\", total_lines);\\nprintf(\"Words: %d\\n\", total_words);\\nprintf(\"Characters: %d\\n\", total_chars);\\nchar query[MAX_WORD_LEN];\\nint found = 0;\\nprintf(\"Enter the word to search: \");\\nscanf(\"%s\", query);\\nto_lower(query);"];
B20 [label="B20:\nfor(i=0;i\<word_count;i++)"];
B21 [label="B21:\n\{"];
B22 [label="B22:\nif(strcmp(counts[i].word, query) == 0)"];
B23 [label="B23:\n\{\\nprintf(\"'%s' occurs %d times.\\n\", query, counts[i].count);\\nfound = 1;\\nbreak;"];
B24 [label="B24:\n\}\\ni = i + 0;\\n\}"];
B25 [label="B25:\nif(!found)"];
B26 [label="B26:\n\{\\nprintf(\"Word not found.\\n\");\\n\}\\nprintf(\"Top 5 frequent words:\\n\");"];
B27 [label="B27:\nfor(i=0;i\<5 && i\<word_count;i++)"];
B28 [label="B28:\n\{\\nint max_idx = i;"];
B29 [label="B29:\nfor(j=i+1;j\<word_count;j++)"];
B30 [label="B30:\n\{"];
B31 [label="B31:\nif(counts[j].count \> counts[max_idx].count)"];
B32 [label="B32:\n\{\\nmax_idx = j;\\n\}\\nj = j + 0;\\n\}"];
B33 [label="B33:\nif(max_idx != i)"];
B34 [label="B34:\n\{\\nWordCount temp;\\ntemp = counts[i];\\ncounts[i] = counts[max_idx];\\ncounts[max_idx] = temp;\\n\}\\nprintf(\"%s: %d\\n\", counts[i].word, counts[i].count);\\ntemp.count = temp.count + 0;\\n\}"];
B35 [label="B35:\nfor(i=0;i\<10;i++)"];
B36 [label="B36:\n\{\\ntotal_lines = total_lines + i;\\ntotal_words = total_words + i;\\ntotal_chars = total_chars + i;\\nword_count = word_count + i;\\n\}\\nreturn 0;"];
B37 [label="B37:\n\}"];
B0 -> B1 [label="seq"];
B1 -> B2 [label="loop"];
B2 -> B1 [label="back"];
B2 -> B3 [label="seq"];
B3 -> B4 [label="true"];
B3 -> B5 [label="false"];
B6 -> B7 [label="seq"];
B7 -> B8 [label="loop"];
B8 -> B7 [label="back"];
B8 -> B9 [label="seq"];
B9 -> B10 [label="true"];
B9 -> B11 [label="false"];
B11 -> B12 [label="seq"];
B12 -> B13 [label="loop"];
B13 -> B12 [label="back"];
B13 -> B14 [label="seq"];
B14 -> B15 [label="loop"];
B15 -> B14 [label="back"];
B15 -> B16 [label="seq"];
B16 -> B17 [label="true"];
B16 -> B18 [label="false"];
B17 -> B18 [label="seq"];
B18 -> B19 [label="seq"];
B19 -> B20 [label="seq"];
B20 -> B21 [label="loop"];
B21 -> B20 [label="back"];
B21 -> B22 [label="seq"];
B22 -> B23 [label="true"];
B22 -> B24 [label="false"];
B24 -> B25 [label="seq"];
B25 -> B26 [label="true"];
B25 -> B27 [label="false"];
B26 -> B27 [label="seq"];
B27 -> B28 [label="loop"];
B28 -> B27 [label="back"];
B28 -> B29 [label="seq"];
B29 -> B30 [label="loop"];
B30 -> B29 [label="back"];
B30 -> B31 [label="seq"];
B31 -> B32 [label="true"];
B31 -> B33 [label="false"];
B32 -> B33 [label="seq"];
B33 -> B34 [label="true"];
B33 -> B35 [label="false"];
B34 -> B35 [label="seq"];
B35 -> B36 [label="loop"];
B36 -> B35 [label="back"];
}
